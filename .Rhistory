opt <- which.min(arbolrecidiva$cptable[,"xerror"])
#opt <- 2
cp1 <- arbolrecidiva$cptable[opt, "CP"]
arbolpodado<-prune (arbolrecidiva, cp=cp1)
plot(arbolpodado)
text(arbolpodado, use.n=TRUE)
Recidiva <- read.table("D:/D/Universidad/4º/MachineLearning/datos_icb.txt", header=TRUE, quote="\"")
formularecidiva<- recid ~.
library(rpart)
Recidiva <- read.table("D:/D/Universidad/4º/MachineLearning/datos_icb.txt", header=TRUE, quote="\"")
datos_icb <- read.csv("D:/Universidad/4º/MachineLearning/datos_icb.txt", sep="")
View(datos_icb)
Recidiva <- read.csv("D:/Universidad/4º/MachineLearning/datos_icb.txt", sep="")
formularecidiva<- recid ~.
arbolrecidiva<-rpart (formularecidiva, Recidiva)
print(arbolrecidiva$cptable)
plot(arbolrecidiva)
text(arbolrecidiva, use.n=TRUE)
opt <- which.min(arbolrecidiva$cptable[,"xerror"])
#opt <- 2
cp1 <- arbolrecidiva$cptable[opt, "CP"]
arbolpodado<-prune (arbolrecidiva, cp=cp1)
plot(arbolpodado)
text(arbolpodado, use.n=TRUE)
""
""
""
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
library(cart)
Recidiva
Recidiva@tam = NULL
division <- rpart(recid,Recidiva,minsplit=1)
formula<- recid ~.
division <- rpart(recid,Recidiva,minsplit=1)
formularecidiva<- recid ~.
library(rpart)
Recidiva <- read.csv("D:/Universidad/4º/MachineLearning/datos_icb.txt", sep="")
formularecidiva<- recid ~.
arbolrecidiva<-rpart (formularecidiva, Recidiva)
formula<- recid ~.
division <- rpart(recid,Recidiva,minsplit=1)
division <- rpart(formula,Recidiva,minsplit=1)
division
summary(division)
mean(Recidiva@edad)
mean(Recidiva@edad)
edad <- Recidiva@edad
edad <- Recidiva$edad
mean(edad)
regiones <- split(Recidiva, f=Recidiva$edad > 55)
regiones
region1, region2 <- split(Recidiva, f=Recidiva$edad > 55)
region1<- split(Recidiva, f=Recidiva$edad > 55 = TRUE)
region1<- split(Recidiva, f=Recidiva$edad > 55,drop = FALSE)
regiones
region1<- split(Recidiva)
region1
formula<- y ~.
division <- rpart(formula,Recidiva,minsplit=1)
recid
formula<- recid ~.
division <- rpart(formula,Recidiva,minsplit=1)
Recidiva[][ncol]
datos <- read.csv("D:/Universidad/4º/MachineLearning/datos_icb.txt", sep="")
name datos[ncol(datos)] <- y
names(datos[ncol(datos)]) <- "y"
formula<- y ~.
division <- rpart(formula,datps,minsplit=1)
division <- rpart(formula,datos,minsplit=1)
datos
names(datos[ncol(datos)]) <- "y"
datos
names(datos)[ncol(datos)] <- "y"
formula<- y ~.
division <- rpart(formula,datos,minsplit=1)
summary(division)
region1<- split(datos)
region1<- split(datos, formula)
formula<- y ~.
division <- rpart(formula,datos,minsplit=1)
region1<- split(datos, formula)
region1<- split(datos, y ~.)
region1<- split(datos, y)
region1<- split(datos, datos$y)
region1
region2<- split(datos, datos$y, drop = FALSE)
region1<- split(datos, datos$y, drop = TRUE)
region2<- split(datos, datos$y, drop = FALSE)
region1
datos[1][]
datos[1][] <- strtoi(datos[1][],0L)
region1<- split(datos, datos[1] > mean(datos$primera, drop=TRUE)
region1
names(datos)[1] <- "primera"
region1<- split(datos, datos[1] > mean(datos$primera, drop=TRUE)
region1
region1<- split(datos, datos[1] > mean(datos$primera), drop=TRUE)
region2<- split(datos,  datos[1] > mean(datos$primera), drop=FALSE)
region1
region2
show(region1)
plot(region1)
region1<- split(datos,f= datos[1] > mean(datos$primera), drop=TRUE)
region2<- split(datos,f =   datos[1] > mean(datos$primera), drop=FALSE)
datos
datos <- read.csv("D:/Universidad/4º/MachineLearning/datos_icb.txt", sep="")
ejercicio2SVM <- read.csv("D:/Universidad/4º/MachineLearning/parcial_diciembre/ejercicio2SVM.csv", header=FALSE)
View(ejercicio2SVM)
plot(ejercicio2SVM)
View(ejercicio2SVM)
View(ejercicio2SVM)
> library("e1071")
library("e1071")
install.packages("e1071")
install.packages("e1071")
library("e1071")
model <- svm(Species ~ ., data = ejercicio2SVM,
method = "C-classification", kernel = "radial",
cost = 10, gamma = 0.1)
summary(model)
install.packages("e1071")
library("e1071")
model <- svm(Species ~ ., data = ejercicio2SVM,
method = "C-classification", kernel = "radial",
cost = 10, gamma = 0.1)
model <- svm(y ~ ., data = ejercicio2SVM,
method = "C-classification", kernel = "radial",
cost = 10, gamma = 0.1)
model <- svm("y" ~ ., data = ejercicio2SVM,
method = "C-classification", kernel = "radial",
cost = 10, gamma = 0.1)
model <- svm(V3 ~ ., data = ejercicio2SVM,
method = "C-classification", kernel = "radial",
cost = 10, gamma = 0.1)
sol <- ksvm(V3 ~., data=ejercicio2SVM, C=10, cross=5)
library("kernlab")
install.packages("kernlab")
library("kernlab")
sol <- ksvm(V3 ~., data=ejercicio2SVM, C=10, cross=5)
View(ejercicio2SVM)
model <- svm(V3 ~ .,X1,X2 data = ejercicio2SVM,
method = "C-classification", kernel = "radial",
cost = 10, gamma = 0.1)
model <- svm(X1,X2 data = ejercicio2SVM,
method = "C-classification", kernel = "radial",
cost = 10, gamma = 0.1)
model <- svm(X1,X2 data = ejercicio2SVM,method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
model <- svm(X1,X2 data = "ejercicio2SVM",method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
model <- svm(X1,X2, data = "ejercicio2SVM",method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
library("e1071")
model <- svm(X1,X2, data = "ejercicio2SVM",method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
model <- svm(ejercicio2SVM@X1,ejercicio2SVM@X2, data = "ejercicio2SVM",method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
model <- svm(V3~., data = "ejercicio2SVM",method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
model <- svm(V3~., data = ejercicio2SVM, method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
sol <- ksvm(V3 ~.,1, data=ejercicio2SVM, C=10, cross=5)
summary(model)
model <- svm(V3~., data = ejercicio2SVM, method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
model <- svm(V3~.,1, data = ejercicio2SVM, method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
model <- svm(1,-1, data = ejercicio2SVM, method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
model <- svm(1,-1,V3~., data = ejercicio2SVM, method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
model <- svm(1,-1,V3~., data = ejercicio2SVM, method = "C-classification", kernel = "logical",cost = 10, gamma = 0.1)
sol <- ksvm(V3 ~.,1, data=ejercicio2SVM, C=10, cross=5)
sol <- ksvm(V3 ~., data=ejercicio2SVM, C=10, cross=5)
sol <- ksvm(V3 ~., data=ejercicio2SVM, C=10, cross=5,type = "C-bsvc", kernel = "rbfdot", kpar = list(sigma = 0.1), C = 10,prob.model = TRUE)
sol <- ksvm(V3 ~., data=ejercicio2SVM, cross=5,type = "C-bsvc", kernel = "rbfdot", kpar = list(sigma = 0.1), C = 10,prob.model = TRUE)
sol <- ksvm(V3 ~., data=ejercicio2SVM, cross=5,type = "TRUE", kernel = "rbfdot", kpar = list(sigma = 0.1), C = 10,prob.model = TRUE)
View(ejercicio2SVM)
View(ejercicio2SVM)
ejercicio2SVM <- read.csv("D:/Universidad/4º/MachineLearning/parcial_diciembre/ejercicio2SVM.csv", header=FALSE)
View(ejercicio2SVM)
data <- read.csv("D:/Universidad/4º/MachineLearning/parcial_diciembre/ejercicio2SVM.csv")
sol <- ksvm(V3 ~., data=data, cross=5,type = "TRUE", kernel = "rbfdot", kpar = list(sigma = 0.1), C = 10,prob.model = TRUE)
sol <- ksvm(y ~., data=data, cross=5,type = "TRUE", kernel = "rbfdot", kpar = list(sigma = 0.1), C = 10,prob.model = TRUE)
sol <- ksvm(y ~., data=data, cross=5,type = "C-bsvc", kernel = "rbfdot", kpar = list(sigma = 0.1), C = 10,prob.model = TRUE)
sol
model <- svm(y~., data = data, method = "C-classification", kernel = "radial",cost = 10, gamma = 0.1)
summary(model)
model <- svm(y~., data = data, method = "C-classification", kernel = "rbfdot",cost = 10, gamma = 0.1)
sol <- ksvm(y ~., data=data, cross=5,type = "C-bsvc", kernel = "linear", kpar = list(sigma = 0.1), C = 10,prob.model = TRUE)
model <- svm(y~., data = data, method = "C-classification", kernel = "linear",cost = 10, gamma = 0.1)
summary(model)
model <- svm(y~., data = data, method = "C-classification", kernel = "linear",ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 15, 20)), gamma = 0.1)
summary(model)
model <- svm(y~., data = data, method = "C-classification", kernel = "linear",ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 15, 20)), ranges = list(gamma = c(0.001, 0.01, 0.1, 1, 5, 10, 15, 20)))
summary(model)
model <- svm(y~., data = data, method = "C-classification", kernel = "radial",ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 15, 20)), ranges = list(gamma = c(0.001, 0.01, 0.1, 1, 5, 10, 15, 20)))
summary(model)
detect.malicious.URL <- read.csv("D:/Universidad/4º/MachineLearning/parcial_diciembre/detect-malicious-URL.csv")
View(detect.malicious.URL)
datos <- read.csv("D:/Universidad/4º/MachineLearning/parcial_diciembre/detect-malicious-URL.csv")
library(rpart)
datos <- read.csv("D:/Universidad/4º/MachineLearning/datos_icb.txt", sep="")
names(datos)[ncol(datos)] <- "y"
names(datos)[1] <- "primera"
formula<- y ~.
division <- rpart(formula,datos,minsplit=1)
#datos[1][] <- strtoi(datos[1][],0L)
division
print(division$cptable)
plot(division)
text(division, use.n=TRUE)
opt <- which.min(division$cptable[,"xerror"])
cp1 <- division$cptable[opt, "CP"]
arbolpodado<-prune (division, cp=1.00)
plot(arbolpodado)
text(arbolpodado, use.n=TRUE)
rpart.plot(arbolpodado)
rpart.plot(arbol)
arbolpodado<-prune (division, cp=1.00)
plot(arbolpodado)
text(arbolpodado, use.n=TRUE)
rpart.plot(arbolpodado)
rpart.plot(arbol)
arbolpodado<-prune (division, cp=1.00)
plot(arbolpodado)
text(arbolpodado, use.n=TRUE)
rpart.plot(arbolpodado)
arbolpodado<-prune (division, cp=1.00)
plot(arbolpodado)
text(arbolpodado, use.n=TRUE)
rpart.plot(arbolpodado)
rpart.plot(arbol)
opt <- which.min(division$cptable[,"xerror"])
cp1 <- division$cptable[opt, "CP"]
arbolpodado<-prune (division, cp=1.00)
plot(arbolpodado)
text(arbolpodado, use.n=TRUE)
rpart.plot(arbolpodado)
rpart.plot(arbol)
opt <- which.min(division$cptable[,"xerror"])
cp1 <- division$cptable[opt, "CP"]
arbolpodado<-prune (division, cp=1.00)
plot(arbolpodado)
text(arbolpodado, use.n=TRUE)
rpart.plot(arbolpodado)
rpart.plot(arbol)
library(rpart)
datos <- read.csv("D:/Universidad/4º/MachineLearning/datos_icb.txt", sep="")
names(datos)[ncol(datos)] <- "y"
names(datos)[1] <- "primera"
formula<- y ~.
division <- rpart(formula,datos,minsplit=1)
#datos[1][] <- strtoi(datos[1][],0L)
division
print(division$cptable)
plot(division)
text(division, use.n=TRUE)
opt <- which.min(division$cptable[,"xerror"])
opt
cp1 <- division$cptable[opt, "CP"]
arbolpodado<-prune (division, cp=1.00)
plot(arbolpodado)
library(rpart)
datos <- read.csv("D:/Universidad/4º/MachineLearning/datos_icb.txt", sep="")
names(datos)[ncol(datos)] <- "y"
names(datos)[1] <- "primera"
formula<- y ~.
division <- rpart(formula,datos,control=rpart.control(minsplit = 1))
#datos[1][] <- strtoi(datos[1][],0L)
division
print(division$cptable)
plot(division)
text(division, use.n=TRUE)
opt <- which.min(division$cptable[,"xerror"])
cp1 <- division$cptable[opt, "CP"]
arbolpodado<-prune (division, cp=1.00)
plot(arbolpodado)
importance(bosque, type=1, class=NULL, scale=TRUE)
library(randomforest)
library(rpart)
library(randomforest)
library(randomForest)
# Cargar todos los paquetes necesarios
library(ggplot2)
library(lattice)
library(caret)
library(nnet)
library(mlbench)
library(adabag)
library(rpart)
library(adabag)
install.packages("adabag")
install.packages("caret")
set.seed(15-i)
tamaño_total <- nrow(datos_k)
tamaño_entreno <- round(tamaño_total*0.8)
ind <- sample(1:tamaño_total, tamaño_entreno)
data(kyphosis)
data("kyphosis")
datos_k<-kyphosis
library(gam)
matriz <- [[2,0],[0,1]]
m <-matrix(2,0;0,1)
vector1 <- c(2,0)
vector2 <- c(0,1)
matrix <- rbind(vector1,vector2)
matrix
r <-1
t <- 45
vector1 <- c(cos(t),-r*sen(t))
vector1 <- c(cos(t),-r*sin(t))
vector2 <- c(sin(t), r*cos(t))
matrix <- rbind(vector1,vector2)
vector1 <- c(2,0)
vector2 <- c(0,1)
matrix <- rbind(vector1,vector2)
r <-1
t <- 45
vector1 <- c(cos(t),-r*sin(t))
vector2 <- c(sin(t), r*cos(t))
J <- rbind(vector1,vector2)
JT <- t(J)
J @ matrix @ JT
J * matrix * JT
install.packages(prettydocks)
install.packages(prettydock)
install.packages(prettydoc)
install.package(prettydoc)
install.packages("prettydoc")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown", lib="C:/Program Files/R/R-4.1.1/library")
sqrt(9)
log(4,base = 2)
2^7
a <- 7*4
b<- 40/5
c <- a+b
a
b
c
#Valor lógico
class(FALSE)
#Carácter
class('a')
#Reales
class(0.2)
#Reales
class(-0.2)
#Enteros
class(1)
#Reales
class2(-0.2)
#Reales
.class2(-0.2)
#Enteros
.class2(1)
#Carácter
.class2('a')
#Complejos
.class2(3+2i)
as.logical(1)
c(1,2,c(3,c(4)))
c(1,2,3,4,5)
c(1,2,c(3,4,c(5)))
a <- c(1,2,3,4,5,6,7,9,10)
b <-1:10
if(a==b){
cat("Iguales")
}else{
cat("Distintos")
}
seq(1,10,1)
seq(1,10,2)
seq(1,10,5)
seq(0,10,5)
seq(0,10,1)
seq(0,10,2)
seq(1,2,0.1)
seq(from = 1, to= 5 , by = 0.5)
rep(2,3)
rep(c(2,3),3)
rep(a,3)
a <- seq(0,10,5)
rep(a,3)
knitr::opts_chunk$set(echo = TRUE)
datos_red <- read.csv("datos.csv") #Version recortada de los datos
install.packages("regexr", lib="C:/Program Files/R/R-4.1.1/library")
library(regexr)
library(pacman)
install.packages("pacman", lib="C:/Program Files/R/R-4.1.1/library")
pacman::p_load_gh("trinker/regexr")
pacman::p_load_gh("trinker/regexr")
R CMD INSTALL
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh("trinker/regexr")
resultados <- datos_red %>%
select(scans.CAT.QuickHeal.result,scans.K7GW.result,scans.Trustlook.result,scans.Cyren.result,scans.SymantecMobileInsight.result,scans.Symantec.result,scans.ESET.NOD32.result,scans.Kaspersky.result,scans.DrWeb.result,scans.McAfee.GW.Edition.result,scans.McAfee.result,scans.Avast.Mobile.result,scans.Avast.result,scans.Avira.result,scans.Microsoft.result,scans.BitDefenderFalx.result,scans.AhnLab.V3.result,scans.Fortinet.result)
library(dplyr)
resultados <- datos_red %>%
select(scans.CAT.QuickHeal.result,scans.K7GW.result,scans.Trustlook.result,scans.Cyren.result,scans.SymantecMobileInsight.result,scans.Symantec.result,scans.ESET.NOD32.result,scans.Kaspersky.result,scans.DrWeb.result,scans.McAfee.GW.Edition.result,scans.McAfee.result,scans.Avast.Mobile.result,scans.Avast.result,scans.Avira.result,scans.Microsoft.result,scans.BitDefenderFalx.result,scans.AhnLab.V3.result,scans.Fortinet.result)
View(resultados)
negativos <- data.frame(nrows = 1 ,ncols = ncol(resultados))
View(negativos)
negativos <- data.frame(row.names = colnames(resultados))
View(negativos)
negativos <- data.frame(col.names = colnames(resultados))
View(negativos)
negativos <- data.frame(antivirus = colnames(resultados))
mutate(negativos,detecciones = count(resultados))
negativos <- data.frame(antivirus = colnames(resultados))
View(negativos)
negativos %>% negativos %>%
mutate(detecciones = sum(is.na(resultados)))
negativos <- negativos %>%
mutate(detecciones = sum(is.na(resultados)))
View(negativos)
mutate(negativos , !detecciones)
negativos <- data.frame(antivirus = colnames(resultados))
mutate(negativos , !detecciones)
mutate(negativos , detecciones)
mutate(negativos , detecciones=NA)
View(negativos)
negativos$detecciones <- NA
View(negativos)
resultados[1]
resultados[,1]
length(resultados)
negativos$detecciones[1]
negativos$detecciones[1] <- 1
View(negativos)
for (i in length(resultados)) {
negativos$detecciones[i] <- sum(is.na(resultados[,i]))
}
View(negativos)
sum(is.na(resultados[,i]))
sum(is.na(resultados[,1]))
sum(is.na(resultados[,2]))
length(resultados)
negativos$detecciones[18]
negativos$detecciones[17]
resultados[,18]
resultados[,0]
for (i in 1:length(resultados)) {
negativos$detecciones[i-1] <- sum(is.na(resultados[,i]))
}
View(negativos)
sum(is.na(resultados[,18]))
sum(is.na(resultados[,16]))
sum(is.na(resultados[,17]))
sum(is.na(resultados[,1]))
sum(is.na(resultados[,2]))
for (i in 1:length(resultados)) {
negativos$detecciones[i] <- sum(is.na(resultados[,i]))
}
View(negativos)
sum(is.na(resultados[,17]))
arrange(negativos, detecciones)
View(negativos)
negativos<-arrange(negativos, detecciones)
View(negativos)
negativos<-arrange(negativos, desc(detecciones))
View(negativos)
a[1]
a[2]
a[1,2]
a[c(1,2)]
a<- 1:15
index <- which(a>7)
a[index]
a <- c(1,2,NA,3,NA)
a
#Omitirlos si no nos conviene que estos valores estén molestando
a<-na.omit(a)
a
#Omitirlos si no nos conviene que estos valores estén molestando
is.na(a) <- a
a
a <- c(1,2,NA,3,NA)
#Omitirlos si no nos conviene que estos valores estén molestando
is.na(a) <- a
a
#Omitirlos si no nos conviene que estos valores estén molestando
a[is.na(a)] <- a
a <- c(1,2,NA,3,NA)
#Omitirlos si no nos conviene que estos valores estén molestando
a[is.na(a)] <- a
#Omitirlos si no nos conviene que estos valores estén molestando
a[is.na(a)] <- 0
a
a <- c(1,2,NA,3,NA)
#Omitirlos si no nos conviene que estos valores estén molestando
a[is.na(a)] <- 0
a
a<-c(1,2,3)
prod(a)
a<-c(1,2,3,2)
prod(a)
sum(1:10)
cumsum(1:10)
cumsum(1:10)[3]
class(cumsum(1:10))
asignaturas <-list(Nombre = c("Cálculo","Discretas","Álgebra"), Alumnos = c(60,30,10), Nota_media = c(2,3,2.5))
class(asignaturas[1])
class(asignaturas[[1]])
asignaturas
unlist(asignaturas)
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh("trinker/regexr")
install.packages("pacman")
setwd("D:/Universidad/Optativas/Laboratorio de Computación Cientifica/VirusTotal")
setwd("D:/Universidad/Optativas/Laboratorio de Computación Cientifica/VirusTotal")
